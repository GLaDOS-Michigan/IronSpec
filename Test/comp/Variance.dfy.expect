
Dafny program verifier finished with 13 verified, 0 errors

Dafny program verifier did not attempt verification
Co.Co(_module.Int) and Co.Co(_module.Int)
true0[]0000
Non.Non(_module.Int) and Non.Non(_module.Int)
true0[]0000
0 and 0
_module.Int0[]0000
CCo.CCo and CCo.CCo
true0[]0000
CNon.CNon and CNon.CNon
true0[]0000
CCon.CCon and CCon.CCon
_module.Int0[]0000
Done

Dafny program verifier did not attempt verification
Co.Co(_module.Int) and Co.Co(_module.Int)
true0[]0000
Non.Non(_module.Int) and Non.Non(_module.Int)
true0[]0000
0 and 0
_module.Int0[]0000
CCo.CCo and CCo.CCo
true0[]0000
CNon.CNon and CNon.CNon
true0[]0000
CCon.CCon and CCon.CCon
_module.Int0[]0000
Done

Dafny program verifier did not attempt verification
Co.Co(_module.Int) and Co.Co(_module.Int)
true0[]0000
Non.Non(_module.Int) and Non.Non(_module.Int)
true0[]0000
0 and 0
_module.Int0[]0000
CCo.CCo and CCo.CCo
true0[]0000
CNon.CNon and CNon.CNon
true0[]0000
CCon.CCon and CCon.CCon
_module.Int0[]0000
Done

Dafny program verifier did not attempt verification
Variance.dfy(109,9): Error: compilation does not support trait types as a type parameter (got 'X'); consider introducing a ghost
Variance.dfy(135,9): Error: compilation does not support trait types as a type parameter (got 'X'); consider introducing a ghost
Variance.dfy(140,9): Error: compilation does not support trait types as a type parameter (got 'X'); consider introducing a ghost
Variance.dfy(149,9): Error: compilation does not support trait types as a type parameter (got 'X'); consider introducing a ghost
Variance.dfy(174,9): Error: compilation does not support trait types as a type parameter (got 'X'); consider introducing a ghost
Variance.dfy(179,9): Error: compilation does not support trait types as a type parameter (got 'X'); consider introducing a ghost
Wrote textual form of partial target program to Variance-java/Variance.java

Dafny program verifier did not attempt verification
Co.Co(_module.Int) and Co.Co(_module.Int)
true0[]0000
Non.Non(_module.Int) and Non.Non(_module.Int)
true0[]0000
0 and 0
_module.Int0[]0000
CCo.CCo and CCo.CCo
true0[]0000
CNon.CNon and CNon.CNon
true0[]0000
CCon.CCon and CCon.CCon
_module.Int0[]0000
Done
