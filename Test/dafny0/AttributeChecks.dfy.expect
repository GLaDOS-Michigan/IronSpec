// AttributeChecks.dfy

datatype List<T> = Nil | Cons(hd: T, tl: List<T>)

datatype {:dt 0} {:dt false + 3} Datatype = {:dt k} Blue | {:dt 50} Green

datatype {:dt 0} {:dt false + 3} AnotherDatatype = {:dt 50} Blue | {:dt k} Green

method If(n: int) returns (k: int)
{
  var i := 0;
  if {:split true} i < n {
    if {:split 1 + 0} true {
    }
  } else if {:split false} i > n {
  } else {:split true} {
  }
}

method IfAlt(n: int) returns (k: int)
{
  var i := 0;
  if {:split true}
  case {:split 1 + true} i < n =>
    if {:split 1 + k} true {
    }
  case {:split false} i > n =>
    {
    }
    return 2;
}

method While(n: int) returns (k: int)
{
  var f: int -> int := x => x;
  var i := 0;
  while {:split true} {:split true + k} i < n
    invariant forall u :: f(u) == u + i
  {
  }
  return 2;
}

method WhileAlt(n: int) returns (k: int)
{
  var i := 0;
  var f: int -> int := x => x;
  while {:split}
    invariant forall u :: f(u) == u + i
  {
    case {:split 1 + true} i < n =>
      {
      }
    case {:split false} i > n =>
      return 2;
  }
}

method Match(xs: List<int>) returns (r: int)
{
  match {:split 1} xs {
    case {:split false} Cons(y, z) =>
      return y;
    case {:split 1 + false} Nil =>
      return 0;
  }
}

function method CaseExpr(r: List<int>): List<int>
{
  match r {
    case Nil =>
      Nil
    case {:ignore 3 + true} Cons(h, Nil) =>
      Nil
    case {:ignore false} Cons(h, t) =>
      CaseExpr(t)
  }
}

method Calc(x: int, y: int)
{
  calc {:split 1} {:split 1 + false} {
    x + y;
    {
      assume x == 0;
    }
    y;
  }
  assert x == 0;
}

method ForAll(i: int, j: int, arr: array2<int>)
{
  forall i, j {:split 1 + false} {:split i + j} | i in {-3, 4} && j in {1, 2} {
    arr[i, j] := 0;
  }
}

method AssertBy(x: int, y: int)
{
  assert {:split false + x} {:split} x == 6 by {
    assume x == 6;
    assume y == 8;
  }
  assert {:split} y == 8;
}

method For(lo: int, hi: int) returns (k: int)
  requires lo <= hi
{
  var f: int -> int := x => x;
  for {:split i} {:split true + k} i := lo to hi
    invariant forall u :: f(u) == u + i
  {
  }
  return 2;
}
AttributeChecks.dfy(103,7): Error: unresolved identifier: k
AttributeChecks.dfy(102,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(102,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(106,25): Error: unresolved identifier: k
AttributeChecks.dfy(105,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(105,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(18,17): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(18,17): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(28,35): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(28,35): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(42,19): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(42,19): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(52,19): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(52,19): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(60,20): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(60,20): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(67,28): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(67,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(77,25): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(77,25): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(84,23): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(84,23): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfy(95,30): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfy(95,30): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
24 resolution/type errors detected in AttributeChecks.dfy
