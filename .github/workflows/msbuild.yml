name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  dotnet-version: 6.0.x # SDK Version for building Dafny
  
jobs:
  singletons:
    runs-on: ubuntu-18.04
    steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1.9.0
      with:
        dotnet-version: ${{env.dotnet-version}}
    - name: Checkout Dafny
      uses: actions/checkout@v2
      with:
        path: dafny
    - name: Restore tools
      working-directory: dafny
      run: dotnet tool restore
    - name: Get XML
      id: boogieVersion
      uses: QwerMike/xpath-action@v1
      with:
        filename: 'dafny/Source/Directory.Build.props'
        expression: "//PackageReference[@Include='Boogie.ExecutionEngine']/@Version"

    - uses: actions-ecosystem/action-regex-match@v2
      id: regex-match
      with:
        text: ${{ steps.boogieVersion.outputs.result }}
        regex: ' Version="([\d\.]+)"'
    - name: Attempt custom Boogie patch
      working-directory: dafny
      run: git apply customBoogie.patch
    - name: Checkout Boogie
      uses: actions/checkout@v2
      with:
        repository: boogie-org/boogie
        path: dafny/boogie
        ref: v${{ steps.regex-match.outputs.group1 }}
    - name: Build Dafny with local Boogie
      working-directory: dafny
      run: dotnet build Source/Dafny.sln
    - name: Check whitespace and style
      working-directory: dafny
      run: dotnet tool run dotnet-format -w -s error --check Source/Dafny.sln --exclude Dafny/Scanner.cs --exclude Dafny/Parser.cs
      
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ## Windows jobs fail on some lit tests and sometimes fail even to
        ## setup a work environment (e.g. dotnet installation)
        ##os: [ubuntu-latest]
        ##os: [ubuntu-latest, windows-latest, ubuntu-18.04]
        ##os: [ubuntu-latest, macos-latest]
        os: [
             ubuntu-latest,
             macos-latest,
           ##  windows-latest,
             ubuntu-18.04,
            ]
        ## Size of the following array must match --num-shards in lit command
        shard: [1, 2, 3, 4, 5]
        include:
        - os:                  'ubuntu-latest'
          os_for_build:        'ubuntu'
        - os:                  'ubuntu-18.04'
          os_for_build:        'ubuntu'
        - os:                  'macos-latest'
          os_for_build:        'osx'
        ##- os:                  'windows-latest'
        ##  os_for_build:        'win'

      fail-fast: false
    steps:
    - name: Manually sync certs
      if: runner.os == 'Linux'
      run: cert-sync /etc/ssl/certs/ca-certificates.crt
    - uses: actions/setup-python@v1
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1.9.0
      with:
        dotnet-version: ${{env.dotnet-version}}
    - name: C++ for ubuntu 18.04
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get install -y build-essential
    - name: Choose the right C++ for ubuntu 18.04
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 60
    - uses: actions/setup-python@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Upgrade outdated pip
      run: python -m pip install --upgrade pip
    - name: Install lit
      run: pip install lit OutputCheck pyyaml
    - uses: actions/setup-node@v1
    - run: npm install bignumber.js
    - name: Checkout Dafny
      uses: actions/checkout@v2
      with:
        path: dafny
        submodules: true
    - run: rm dafny/Test/libraries/lit.site.cfg # we remove the lit configuration file in the library repo (a git submodule) to prevent override
    - name: Create release
      run: |
        python dafny/Scripts/package.py 0.0.0-CI --os ${{ matrix.os_for_build }} --skip_manual=true --trial=true --github_secret=${{ secrets.GITHUB_TOKEN }} --out=CI.zip
    - if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Expand-Archive dafny/Package/CI.zip unzippedRelease
    - if: runner.os != 'Windows'
      run: |
        unzip dafny/Package/CI.zip -d unzippedRelease
    - name: Run integration tests
      run: |
        XUNIT_SHARD=${{ matrix.shard }} XUNIT_SHARD_COUNT=5 DAFNY_RELEASE=$PWD/unzippedRelease/dafny dotnet test -v:n --logger trx dafny/Source/IntegrationTests/IntegrationTests.csproj
    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: integration-test-results-${{ matrix.os }}
        path: dafny/Source/IntegrationTests/TestResults/*.trx
